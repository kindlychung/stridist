// use addone;

pub fn euclidean(v1: &Vec<f64>, v2: &Vec<f64>) -> f64 {
    let z = v1.iter().zip(v2.iter());
    let d = z.map(|(x, y): (&f64, &f64)| (x - y).powi(2)).fold(0f64, |a, b| a + b);
    d.sqrt()
}

// Sum of absolute differences
pub fn ads(v1: &Vec<f64>, v2: &Vec<f64>) -> f64 {
    let z = v1.iter().zip(v2.iter());
    z.map(|(x, y): (&f64, &f64)| (x - y).abs()).fold(0f64, |a, b| a + b)
}

use ::Strategy;
pub fn dist(v1: &Vec<f64>, v2: &Vec<f64>, strategy: Strategy) -> f64 {
    let res = match strategy {
        Strategy::Euclidean => euclidean(v1, v2),
        Strategy::Ads => ads(v1, v2),
    }
    res
}


#[cfg(test)]
use float_cmp::*;

#[test]
fn euclidean_correct() {
    let v1: Vec<f64> = vec![1f64, 2f64, 3f64];
    let v2: Vec<f64> = vec![3f64, 2f64, 1f64];
    let d = euclidean(&v1, &v2);
    assert!(d.approx_eq_ulps(&8f64.sqrt(), 2));
    let v1: Vec<f64> = vec![1f64, 2f64, 3f64];
    let v2: Vec<f64> = vec![4f64, 2f64, 1f64];
    let d = euclidean(&v1, &v2);
    assert!(d.approx_eq_ulps(&13f64.sqrt(), 2));
    let d = euclidean(&v1, &v1);
    assert!(d.approx_eq_ulps(&0f64.sqrt(), 2));
}

#[test]
fn ads_correct() {
    let v1: Vec<f64> = vec![1f64, 2f64, 3f64];
    let v2: Vec<f64> = vec![3f64, 2f64, 1f64];
    let d = ads(&v1, &v2);
    assert!(d.approx_eq_ulps(&4f64, 2));
    let v1: Vec<f64> = vec![1f64, 2f64, 3f64];
    let v2: Vec<f64> = vec![4f64, 3f64, 1f64];
    let d = ads(&v1, &v2);
    assert!(d.approx_eq_ulps(&6f64, 2));
    let d = ads(&v1, &v1);
    assert!(d.approx_eq_ulps(&0f64, 2));
}
